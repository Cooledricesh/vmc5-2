name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Test and Lint
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [20.x]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}

    - name: Install pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 8
        run_install: false

    - name: Get pnpm store directory
      shell: bash
      run: |
        echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

    - name: Setup pnpm cache
      uses: actions/cache@v4
      with:
        path: ${{ env.STORE_PATH }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-

    - name: Install dependencies
      run: pnpm install --frozen-lockfile

    - name: Run linting
      run: pnpm lint
      continue-on-error: true  # Don't fail on lint warnings for now

    - name: Run tests with coverage
      run: pnpm test:coverage
      env:
        CI: true

    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-report
        path: coverage/

    - name: Build project
      run: pnpm build
      env:
        NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: ${{ secrets.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }}
        CLERK_SECRET_KEY: ${{ secrets.CLERK_SECRET_KEY }}
        NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
        NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
        SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
        TOSS_SECRET_KEY: ${{ secrets.TOSS_SECRET_KEY }}
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        CLERK_WEBHOOK_SIGNING_SECRET: ${{ secrets.CLERK_WEBHOOK_SIGNING_SECRET }}
      continue-on-error: true  # Don't fail on build errors for now

    - name: Comment Test Results
      if: github.event_name == 'pull_request' && always()
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs');
          const path = require('path');

          // Read coverage summary if exists
          let coverageComment = '## Test Results\n\n';
          const coveragePath = path.join(process.cwd(), 'coverage', 'coverage-summary.json');

          if (fs.existsSync(coveragePath)) {
            const coverage = JSON.parse(fs.readFileSync(coveragePath, 'utf8'));
            const total = coverage.total;

            coverageComment += '### Coverage Summary\n\n';
            coverageComment += '| Type | Coverage | Details |\n';
            coverageComment += '|------|----------|---------|\\n';
            coverageComment += `| Statements | ${total.statements.pct}% | ${total.statements.covered}/${total.statements.total} |\n`;
            coverageComment += `| Branches | ${total.branches.pct}% | ${total.branches.covered}/${total.branches.total} |\n`;
            coverageComment += `| Functions | ${total.functions.pct}% | ${total.functions.covered}/${total.functions.total} |\n`;
            coverageComment += `| Lines | ${total.lines.pct}% | ${total.lines.covered}/${total.lines.total} |\n`;
          }

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: coverageComment
          });

  # Optional: Add coverage threshold check
  coverage-check:
    name: Coverage Threshold Check
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download coverage report
      uses: actions/download-artifact@v4
      with:
        name: coverage-report
        path: coverage/

    - name: Check coverage thresholds
      run: |
        echo "Coverage check completed. In the future, enforce minimum coverage thresholds here."
        # Future: Add script to check if coverage meets minimum thresholds
        # For now, this is informational only